// automatically generated by rust-bindgen
#![allow(non_camel_case_types)]
use libc::{dev_t, iovec, int64_t, mode_t, size_t, sockaddr_storage, stat, statvfs, off_t, utimbuf,
           uint32_t, uint64_t};

#[repr(C, packed)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ceph_file_layout {
    /// stripe unit, in bytes.  must be multiple of page size
    pub fl_stripe_unit: uint32_t,
    /// over this many objects
    pub fl_stripe_count: uint32_t,
    /// until objects are this big, then move to new objects
    pub fl_object_size: uint32_t,
    /// 0 = none; 1 = sha256
    pub fl_cas_hash: uint32_t,
    /// pg -> disk layout
    /// for per-object parity, if any
    pub fl_object_stripe_unit: uint32_t,
    /// object -> pg layout
    /// preferred primary for pg (-1 for none)
    pub fl_pg_preferred: uint32_t,
    /// namespace, crush ruleset, rep level
    pub fl_pg_pool: uint32_t,
}
impl ::std::default::Default for ceph_file_layout {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct inodeno_t {
    pub val: uint64_t,
}
impl ::std::default::Default for inodeno_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _snapid_t {
    pub val: uint64_t,
}
impl ::std::default::Default for _snapid_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type snapid_t = _snapid_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct vinodeno_t {
    pub ino: inodeno_t,
    pub snapid: snapid_t,
}
impl ::std::default::Default for vinodeno_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub enum Fh { }
pub enum Inode { }
pub enum ceph_mount_info { }
pub enum ceph_dir_result { }
pub enum CephContext { }
pub type rados_t = *mut ::std::os::raw::c_void;
pub enum dirent { }

#[link(name = "cephfs")]
extern "C" {
    /// Get the version of libcephfs.
    /// The version number is major.minor.patch.
    pub fn ceph_version(major: *mut ::std::os::raw::c_int,
                        minor: *mut ::std::os::raw::c_int,
                        patch: *mut ::std::os::raw::c_int)
                        -> *const ::std::os::raw::c_char;
    ///  Create a mount handle for interacting with Ceph.  All libcephfs
    /// functions operate on a mount info handle.
    pub fn ceph_create(cmount: *mut *mut ceph_mount_info,
                       id: *const ::std::os::raw::c_char)
                       -> ::std::os::raw::c_int;
    ///  Create a mount handle from a CephContext, which holds the configuration
    /// for the ceph cluster.  A CephContext can be acquired from an existing ceph_mount_info
    /// handle, using the @ref ceph_get_mount_context call.  Note that using the same CephContext
    /// for two different mount handles results in the same client entity id being used.
    pub fn ceph_create_with_context(cmount: *mut *mut ceph_mount_info,
                                    conf: *mut CephContext)
                                    -> ::std::os::raw::c_int;
    /// Create a mount handle from a rados_t, for using libcephfs in the
    /// same process as librados.
    pub fn ceph_create_from_rados(cmount: *mut *mut ceph_mount_info,
                                  cluster: rados_t)
                                  -> ::std::os::raw::c_int;
    /// Initialize the filesystem client (but do not mount the filesystem yet)
    pub fn ceph_init(cmount: *mut ceph_mount_info) -> ::std::os::raw::c_int;
    /// Perform a mount using the path for the root of the mount.
    /// It is optional to call ceph_init before this.  If ceph_init has
    /// not already been called, it will be called in the course of this operation.
    pub fn ceph_mount(cmount: *mut ceph_mount_info,
                      root: *const ::std::os::raw::c_char)
                      -> ::std::os::raw::c_int;
    ///  Execute a management command remotely on an MDS.
    /// Must have called ceph_init or ceph_mount before calling this.
    /// @param mds_spec string representing rank, MDS name, GID or '*'
    /// @param cmd array of null-terminated strings
    /// @param cmdlen length of cmd array
    /// @param inbuf non-null-terminated input data to command
    /// @param inbuflen length in octets of inbuf
    /// @param outbuf populated with pointer to buffer (command output data)
    /// @param outbuflen length of allocated outbuf
    /// @param outs populated with pointer to buffer (command error strings)
    /// @param outslen length of allocated outs
    pub fn ceph_mds_command(cmount: *mut ceph_mount_info,
                            mds_spec: *const ::std::os::raw::c_char,
                            cmd: *mut *const ::std::os::raw::c_char,
                            cmdlen: size_t,
                            inbuf: *const ::std::os::raw::c_char,
                            inbuflen: size_t,
                            outbuf: *mut *mut ::std::os::raw::c_char,
                            outbuflen: *mut size_t,
                            outs: *mut *mut ::std::os::raw::c_char,
                            outslen: *mut size_t)
                            -> ::std::os::raw::c_int;
    /// Free a buffer, such as those used for output arrays from ceph_mds_command
    pub fn ceph_buffer_free(buf: *mut ::std::os::raw::c_char);
    /// Unmount a mount handle.
    pub fn ceph_unmount(cmount: *mut ceph_mount_info) -> ::std::os::raw::c_int;
    /// Destroy the mount handle.
    /// The handle should not be mounted. This should be called on completion of
    /// all libcephfs functions.
    pub fn ceph_release(cmount: *mut ceph_mount_info) -> ::std::os::raw::c_int;
    /// Deprecated. Unmount and destroy the ceph mount handle. This should be
    /// called on completion of all libcephfs functions.
    /// Equivalent to ceph_unmount() + ceph_release() without error handling.
    pub fn ceph_shutdown(cmount: *mut ceph_mount_info);
    /// Extract the CephContext from the mount point handle.
    pub fn ceph_get_mount_context(cmount: *mut ceph_mount_info) -> *mut CephContext;
    /// Check mount status.
    /// Return non-zero value if mounted. Otherwise, zero.
    pub fn ceph_is_mounted(cmount: *mut ceph_mount_info) -> ::std::os::raw::c_int;
    /// Load the ceph configuration from the specified config file.
    pub fn ceph_conf_read_file(cmount: *mut ceph_mount_info,
                               path_list: *const ::std::os::raw::c_char)
                               -> ::std::os::raw::c_int;
    ///  Parse the command line arguments and load the configuration parameters.
    /// @param cmount the mount handle to load the configuration parameters into.
    /// @param argc count of the arguments in argv
    /// @param argv the argument list
    /// @returns 0 on success, negative error code on failure
    pub fn ceph_conf_parse_argv(cmount: *mut ceph_mount_info,
                                argc: ::std::os::raw::c_int,
                                argv: *mut *const ::std::os::raw::c_char)
                                -> ::std::os::raw::c_int;
    /// Configure the cluster handle based on an environment variable
    /// The contents of the environment variable are parsed as if they were
    /// Ceph command line options. If var is NULL, the CEPH_ARGS
    /// environment variable is used.
    /// @pre ceph_mount() has not been called on the handle
    /// @note BUG: this is not threadsafe - it uses a static buffer
    /// @param cmount handle to configure
    /// @param var name of the environment variable to read
    /// @returns 0 on success, negative error code on failure
    pub fn ceph_conf_parse_env(cmount: *mut ceph_mount_info,
                               var: *const ::std::os::raw::c_char)
                               -> ::std::os::raw::c_int;
    ///  Sets a configuration value from a string.
    /// @param cmount the mount handle to set the configuration value on
    /// @param option the configuration option to set
    /// @param value the value of the configuration option to set
    /// @returns 0 on success, negative error code otherwise.
    pub fn ceph_conf_set(cmount: *mut ceph_mount_info,
                         option: *const ::std::os::raw::c_char,
                         value: *const ::std::os::raw::c_char)
                         -> ::std::os::raw::c_int;
    /// Gets the configuration value as a string.
    /// @param cmount the mount handle to set the configuration value on
    /// @param option the config option to get
    /// @param buf the buffer to fill with the value
    /// @param len the length of the buffer.
    /// @returns the size of the buffer filled in with the value, or negative error code on failure
    pub fn ceph_conf_get(cmount: *mut ceph_mount_info,
                         option: *const ::std::os::raw::c_char,
                         buf: *mut ::std::os::raw::c_char,
                         len: size_t)
                         -> ::std::os::raw::c_int;
    ///  Perform a statfs on the ceph file system.  This call fills in file system wide statistics
    /// into the passed in buffer.
    /// @param cmount the ceph mount handle to use for performing the statfs.
    /// @param path can be any path within the mounted filesystem
    /// @param stbuf the file system statistics filled in by this function.
    /// @return 0 on success, negative error code otherwise.
    pub fn ceph_statfs(cmount: *mut ceph_mount_info,
                       path: *const ::std::os::raw::c_char,
                       stbuf: *mut statvfs)
                       -> ::std::os::raw::c_int;
    /// Synchronize all filesystem data to persistent media.
    pub fn ceph_sync_fs(cmount: *mut ceph_mount_info) -> ::std::os::raw::c_int;
    /// Get the current working directory.
    pub fn ceph_getcwd(cmount: *mut ceph_mount_info) -> *const ::std::os::raw::c_char;
    /// Change the current working directory.
    pub fn ceph_chdir(cmount: *mut ceph_mount_info,
                      path: *const ::std::os::raw::c_char)
                      -> ::std::os::raw::c_int;
    /// Open the given directory.
    /// @param cmount the ceph mount handle to use to open the directory
    /// @param name the path name of the directory to open.  Must be either an absolute path
    /// or a path relative to the current working directory.
    /// @param dirpp the directory result pointer structure to fill in.
    /// @returns 0 on success or negative error code otherwise.
    pub fn ceph_opendir(cmount: *mut ceph_mount_info,
                        name: *const ::std::os::raw::c_char,
                        dirpp: *mut *mut ceph_dir_result)
                        -> ::std::os::raw::c_int;
    /// Close the open directory.
    /// @param cmount the ceph mount handle to use for closing the directory
    /// @param dirp the directory result pointer (set by ceph_opendir) to close
    /// @returns 0 on success or negative error code on failure.
    pub fn ceph_closedir(cmount: *mut ceph_mount_info,
                         dirp: *mut ceph_dir_result)
                         -> ::std::os::raw::c_int;
    /// Get the next entry in an open directory.
    /// @param cmount the ceph mount handle to use for performing the readdir.
    /// @param dirp the directory stream pointer from an opendir holding the state of the
    /// next entry to return.
    /// @returns the next directory entry or NULL if at the end of the directory (or the directory
    /// is empty.  This pointer should not be freed by the caller, and is only safe to
    /// access between return and the next call to ceph_readdir or ceph_closedir.
    pub fn ceph_readdir(cmount: *mut ceph_mount_info, dirp: *mut ceph_dir_result) -> *mut dirent;
    /// A safe version of ceph_readdir, where the directory entry struct is allocated by the caller.
    /// @param cmount the ceph mount handle to use for performing the readdir.
    /// @param dirp the directory stream pointer from an opendir holding the state of the
    /// next entry to return.
    /// @param de the directory entry pointer filled in with the next directory entry of the dirp
    /// state.
    /// @returns 1 if the next entry was filled in, 0 if the end of the directory stream was
    /// reached,
    /// and a negative error code on failure.
    pub fn ceph_readdir_r(cmount: *mut ceph_mount_info,
                          dirp: *mut ceph_dir_result,
                          de: *mut dirent)
                          -> ::std::os::raw::c_int;
    /// A safe version of ceph_readdir that also returns the file statistics (readdir+stat).
    /// @param cmount the ceph mount handle to use for performing the readdir_plus_r.
    /// @param dirp the directory stream pointer from an opendir holding the state of the
    /// next entry to return.
    /// @param de the directory entry pointer filled in with the next directory entry of the dirp
    /// state.
    /// @param st the stats of the file/directory of the entry returned
    /// @param stmask a mask that gets filled in with the stats fields that are being set in the st
    /// parameter.
    /// @returns 1 if the next entry was filled in, 0 if the end of the directory stream was
    /// reached,
    /// and a negative error code on failure.
    pub fn ceph_readdirplus_r(cmount: *mut ceph_mount_info,
                              dirp: *mut ceph_dir_result,
                              de: *mut dirent,
                              st: *mut stat,
                              stmask: *mut ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int;
    /// Gets multiple directory entries.
    /// @param cmount the ceph mount handle to use for performing the getdents.
    /// @param dirp the directory stream pointer from an opendir holding the state of the
    /// next entry/entries to return.
    /// @param name an array of struct dirent that gets filled in with the to fill
    /// returned directory entries into.
    /// @param buflen the length of the buffer, which should be the number of
    /// dirent structs * sizeof(struct dirent).
    /// @returns the length of the buffer that was filled in, will always be multiples
    /// of sizeof(struct dirent), or a
    /// negative error code.  If the buffer is not large enough for a
    /// single entry, -ERANGE is returned.
    pub fn ceph_getdents(cmount: *mut ceph_mount_info,
                         dirp: *mut ceph_dir_result,
                         name: *mut ::std::os::raw::c_char,
                         buflen: ::std::os::raw::c_int)
                         -> ::std::os::raw::c_int;
    /// Gets multiple directory names.
    /// @param cmount the ceph mount handle to use for performing the getdents.
    /// @param dirp the directory stream pointer from an opendir holding the state of the
    /// next entry/entries to return.
    /// @param name a buffer to fill in with directory entry names.
    /// @param buflen the length of the buffer that can be filled in.
    /// @returns the length of the buffer filled in with entry names,
    /// or a negative error code on failure.
    /// If the buffer isn't large enough for a single entry, -ERANGE is returned.
    pub fn ceph_getdnames(cmount: *mut ceph_mount_info,
                          dirp: *mut ceph_dir_result,
                          name: *mut ::std::os::raw::c_char,
                          buflen: ::std::os::raw::c_int)
                          -> ::std::os::raw::c_int;
    /// Rewind the directory stream to the beginning of the directory.
    /// @param cmount the ceph mount handle to use for performing the rewinddir.
    /// @param dirp the directory stream pointer to rewind.
    pub fn ceph_rewinddir(cmount: *mut ceph_mount_info, dirp: *mut ceph_dir_result);
    /// Get the current position of a directory stream.
    /// @param cmount the ceph mount handle to use for performing the telldir.
    /// @param dirp the directory stream pointer to get the current position of.
    /// @returns the position of the directory stream.  Note that the offsets returned
    /// by ceph_telldir do not have a particular order (cannot be compared with
    /// inequality).
    pub fn ceph_telldir(cmount: *mut ceph_mount_info, dirp: *mut ceph_dir_result) -> int64_t;
    /// Move the directory stream to a position specified by the given offset.
    /// @param cmount the ceph mount handle to use for performing the seekdir.
    /// @param dirp the directory stream pointer to move.
    /// @param offset the position to move the directory stream to.  This offset should be
    /// a value returned by seekdir.  Note that this value does not refer to the nth
    /// entry in a directory, and can not be manipulated with plus or minus.
    pub fn ceph_seekdir(cmount: *mut ceph_mount_info,
                        dirp: *mut ceph_dir_result,
                        offset: int64_t);
    /// Create a directory.
    /// @param cmount the ceph mount handle to use for making the directory.
    /// @param path the path of the directory to create.  This must be either an
    /// absolute path or a relative path off of the current working directory.
    /// @param mode the permissions the directory should have once created.
    /// @returns 0 on success or a negative return code on error.
    pub fn ceph_mkdir(cmount: *mut ceph_mount_info,
                      path: *const ::std::os::raw::c_char,
                      mode: mode_t)
                      -> ::std::os::raw::c_int;
    ///  Create multiple directories at once.
    /// @param cmount the ceph mount handle to use for making the directories.
    /// @param path the full path of directories and sub-directories that should
    /// be created.
    /// @param mode the permissions the directory should have once created.
    /// @returns 0 on success or a negative return code on error.
    pub fn ceph_mkdirs(cmount: *mut ceph_mount_info,
                       path: *const ::std::os::raw::c_char,
                       mode: mode_t)
                       -> ::std::os::raw::c_int;
    /// Remove a directory
    pub fn ceph_rmdir(cmount: *mut ceph_mount_info,
                      path: *const ::std::os::raw::c_char)
                      -> ::std::os::raw::c_int;
    /// Create a link.
    pub fn ceph_link(cmount: *mut ceph_mount_info,
                     existing: *const ::std::os::raw::c_char,
                     newname: *const ::std::os::raw::c_char)
                     -> ::std::os::raw::c_int;
    /// Read a symbolic link.
    /// @param cmount the ceph mount handle to use for creating the link.
    /// @param path the path to the symlink to read
    /// @param buf the buffer to hold the the path of the file that the symlink points to.
    /// @param size the length of the buffer
    /// @returns number of bytes copied on success or negative error code on failure
    pub fn ceph_readlink(cmount: *mut ceph_mount_info,
                         path: *const ::std::os::raw::c_char,
                         buf: *mut ::std::os::raw::c_char,
                         size: int64_t)
                         -> ::std::os::raw::c_int;
    /// Creates a symbolic link.
    pub fn ceph_symlink(cmount: *mut ceph_mount_info,
                        existing: *const ::std::os::raw::c_char,
                        newname: *const ::std::os::raw::c_char)
                        -> ::std::os::raw::c_int;
    /// Removes a file, link, or symbolic link.  If the file/link has multiple links to it, the
    /// file will not disappear from the namespace until all references to it are removed.
    pub fn ceph_unlink(cmount: *mut ceph_mount_info,
                       path: *const ::std::os::raw::c_char)
                       -> ::std::os::raw::c_int;
    /// Rename a file or directory.
    pub fn ceph_rename(cmount: *mut ceph_mount_info,
                       from: *const ::std::os::raw::c_char,
                       to: *const ::std::os::raw::c_char)
                       -> ::std::os::raw::c_int;
    /// Get a file's statistics and attributes.
    pub fn ceph_stat(cmount: *mut ceph_mount_info,
                     path: *const ::std::os::raw::c_char,
                     stbuf: *mut stat)
                     -> ::std::os::raw::c_int;
    /// Get a file's statistics and attributes, without following symlinks.
    pub fn ceph_lstat(cmount: *mut ceph_mount_info,
                      path: *const ::std::os::raw::c_char,
                      stbuf: *mut stat)
                      -> ::std::os::raw::c_int;
    /// Set a file's attributes.
    /// @param cmount the ceph mount handle to use for performing the setattr.
    /// @param relpath the path to the file/directory to set the attributes of.
    /// @param attr the stat struct that must include attribute values to set on the file.
    /// @param mask a mask of all the stat values that have been set on the stat struct.
    /// @returns 0 on success or negative error code on failure.
    pub fn ceph_setattr(cmount: *mut ceph_mount_info,
                        relpath: *const ::std::os::raw::c_char,
                        attr: *mut stat,
                        mask: ::std::os::raw::c_int)
                        -> ::std::os::raw::c_int;
    /// Change the mode bits (permissions) of a file/directory
    pub fn ceph_chmod(cmount: *mut ceph_mount_info,
                      path: *const ::std::os::raw::c_char,
                      mode: mode_t)
                      -> ::std::os::raw::c_int;
    /// Change the mode bits (permissions) of an open file.
    pub fn ceph_fchmod(cmount: *mut ceph_mount_info,
                       fd: ::std::os::raw::c_int,
                       mode: mode_t)
                       -> ::std::os::raw::c_int;
    /// Change the ownership of a file/directory.
    pub fn ceph_chown(cmount: *mut ceph_mount_info,
                      path: *const ::std::os::raw::c_char,
                      uid: ::std::os::raw::c_int,
                      gid: ::std::os::raw::c_int)
                      -> ::std::os::raw::c_int;
    /// Change the ownership of a file from an open file descriptor.
    pub fn ceph_fchown(cmount: *mut ceph_mount_info,
                       fd: ::std::os::raw::c_int,
                       uid: ::std::os::raw::c_int,
                       gid: ::std::os::raw::c_int)
                       -> ::std::os::raw::c_int;
    /// Change the ownership of a file/directory, don't follow symlinks.
    pub fn ceph_lchown(cmount: *mut ceph_mount_info,
                       path: *const ::std::os::raw::c_char,
                       uid: ::std::os::raw::c_int,
                       gid: ::std::os::raw::c_int)
                       -> ::std::os::raw::c_int;
    /// Change file/directory last access and modification times.
    pub fn ceph_utime(cmount: *mut ceph_mount_info,
                      path: *const ::std::os::raw::c_char,
                      buf: *mut utimbuf)
                      -> ::std::os::raw::c_int;
    /// Apply or remove an advisory lock.
    /// @param cmount the ceph mount handle to use for performing the lock.
    /// @param fd the open file descriptor to change advisory lock.
    /// @param operation the advisory lock operation to be performed on the file
    /// descriptor among LOCK_SH (shared lock), LOCK_EX (exclusive lock),
    /// or LOCK_UN (remove lock). The LOCK_NB value can be ORed to perform a
    /// non-blocking operation.
    /// @param owner the user-supplied owner identifier (an arbitrary integer)
    /// @returns 0 on success or negative error code on failure.
    pub fn ceph_flock(cmount: *mut ceph_mount_info,
                      fd: ::std::os::raw::c_int,
                      operation: ::std::os::raw::c_int,
                      owner: uint64_t)
                      -> ::std::os::raw::c_int;
    /// Truncate the file to the given size.  If this operation causes the
    /// file to expand, the empty bytes will be filled in with zeros.
    pub fn ceph_truncate(cmount: *mut ceph_mount_info,
                         path: *const ::std::os::raw::c_char,
                         size: int64_t)
                         -> ::std::os::raw::c_int;
    /// Make a block or character special file.
    /// @param cmount the ceph mount handle to use for performing the mknod.
    /// @param path the path to the special file.
    /// @param mode the permissions to use and the type of special file.  The type can be
    /// one of S_IFREG, S_IFCHR, S_IFBLK, S_IFIFO.
    /// @param rdev If the file type is S_IFCHR or S_IFBLK then this parameter specifies the
    /// major and minor numbers of the newly created device special file.  Otherwise,
    /// it is ignored.
    /// @returns 0 on success or negative error code on failure.
    pub fn ceph_mknod(cmount: *mut ceph_mount_info,
                      path: *const ::std::os::raw::c_char,
                      mode: mode_t,
                      rdev: dev_t)
                      -> ::std::os::raw::c_int;
    /// Create and/or open a file.
    pub fn ceph_open(cmount: *mut ceph_mount_info,
                     path: *const ::std::os::raw::c_char,
                     flags: ::std::os::raw::c_int,
                     mode: mode_t)
                     -> ::std::os::raw::c_int;
    /// Create and/or open a file with a specific file layout.
    /// @param cmount the ceph mount handle to use for performing the open.
    /// @param path the path of the file to open.  If the flags parameter includes O_CREAT,
    /// the file will first be created before opening.
    /// @param flags a set of option masks that control how the file is created/opened.
    /// @param mode the permissions to place on the file if the file does not exist and O_CREAT
    /// is specified in the flags.
    /// @param stripe_unit the stripe unit size (option, 0 for default)
    /// @param stripe_count the stripe count (optional, 0 for default)
    /// @param object_size the object size (optional, 0 for default)
    /// @param data_pool name of target data pool name (optional, NULL or empty string for default)
    /// @returns a non-negative file descriptor number on success or a negative error code on
    /// failure.
    pub fn ceph_open_layout(cmount: *mut ceph_mount_info,
                            path: *const ::std::os::raw::c_char,
                            flags: ::std::os::raw::c_int,
                            mode: mode_t,
                            stripe_unit: ::std::os::raw::c_int,
                            stripe_count: ::std::os::raw::c_int,
                            object_size: ::std::os::raw::c_int,
                            data_pool: *const ::std::os::raw::c_char)
                            -> ::std::os::raw::c_int;
    /// Close the open file.
    pub fn ceph_close(cmount: *mut ceph_mount_info,
                      fd: ::std::os::raw::c_int)
                      -> ::std::os::raw::c_int;
    /// Reposition the open file stream based on the given offset.
    /// @param cmount the ceph mount handle to use for performing the lseek.
    /// @param fd the open file descriptor referring to the open file and holding the
    /// current position of the stream.
    /// @param offset the offset to set the stream to
    /// @param whence the flag to indicate what type of seeking to perform:
    /// SEEK_SET: the offset is set to the given offset in the file.
    /// SEEK_CUR: the offset is set to the current location plus @e offset bytes.
    /// SEEK_END: the offset is set to the end of the file plus @e offset bytes.
    /// @returns 0 on success or a negative error code on failure.
    pub fn ceph_lseek(cmount: *mut ceph_mount_info,
                      fd: ::std::os::raw::c_int,
                      offset: int64_t,
                      whence: ::std::os::raw::c_int)
                      -> int64_t;
    /// Read data from the file.
    pub fn ceph_read(cmount: *mut ceph_mount_info,
                     fd: ::std::os::raw::c_int,
                     buf: *mut ::std::os::raw::c_char,
                     size: int64_t,
                     offset: int64_t)
                     -> ::std::os::raw::c_int;
    /// Read data from the file.
    pub fn ceph_preadv(cmount: *mut ceph_mount_info,
                       fd: ::std::os::raw::c_int,
                       iov: *const iovec,
                       iovcnt: ::std::os::raw::c_int,
                       offset: int64_t)
                       -> ::std::os::raw::c_int;
    /// Write data to a file.
    pub fn ceph_write(cmount: *mut ceph_mount_info,
                      fd: ::std::os::raw::c_int,
                      buf: *const ::std::os::raw::c_char,
                      size: int64_t,
                      offset: int64_t)
                      -> ::std::os::raw::c_int;
    /// Write data to a file.
    /// @param cmount the ceph mount handle to use for performing the write.
    /// @param fd the file descriptor of the open file to write to
    /// @param iov the iov structure to read data into
    /// @param iovcnt the number of items that iov includes
    /// @param offset the offset of the file write into.  If this value is negative, the
    /// function writes to the current offset of the file descriptor.
    /// @returns the number of bytes written, or a negative error code
    pub fn ceph_pwritev(cmount: *mut ceph_mount_info,
                        fd: ::std::os::raw::c_int,
                        iov: *const iovec,
                        iovcnt: ::std::os::raw::c_int,
                        offset: int64_t)
                        -> ::std::os::raw::c_int;
    /// Truncate a file to the given size.
    pub fn ceph_ftruncate(cmount: *mut ceph_mount_info,
                          fd: ::std::os::raw::c_int,
                          size: int64_t)
                          -> ::std::os::raw::c_int;
    /// Synchronize an open file to persistent media
    pub fn ceph_fsync(cmount: *mut ceph_mount_info,
                      fd: ::std::os::raw::c_int,
                      syncdataonly: ::std::os::raw::c_int)
                      -> ::std::os::raw::c_int;
    /// Preallocate or release disk space for the file for the byte range.
    /// @param cmount the ceph mount handle to use for performing the fallocate.
    /// @param fd the file descriptor of the file to fallocate.
    /// @param mode the flags determines the operation to be performed on the given range.
    /// default operation (0) allocate and initialize to zero the file in the byte range,
    /// and the file size will be changed if offset + length is greater than
    /// the file size. if the FALLOC_FL_KEEP_SIZE flag is specified in the mode,
    /// the file size will not be changed. if the FALLOC_FL_PUNCH_HOLE flag is
    /// specified in the mode, the operation is deallocate space and zero the byte range.
    /// @param offset the byte range starting.
    /// @param length the length of the range.
    /// @return 0 on success or a negative error code on failure.
    pub fn ceph_fallocate(cmount: *mut ceph_mount_info,
                          fd: ::std::os::raw::c_int,
                          mode: ::std::os::raw::c_int,
                          offset: int64_t,
                          length: int64_t)
                          -> ::std::os::raw::c_int;
    /// Get the open file's statistics.
    pub fn ceph_fstat(cmount: *mut ceph_mount_info,
                      fd: ::std::os::raw::c_int,
                      stbuf: *mut stat)
                      -> ::std::os::raw::c_int;
    /// Get an extended attribute.
    /// @param cmount the ceph mount handle to use for performing the getxattr.
    /// @param path the path to the file
    /// @param name the name of the extended attribute to get
    /// @param value a pre-allocated buffer to hold the xattr's value
    /// @param size the size of the pre-allocated buffer
    /// @returns the size of the value or a negative error code on failure.
    pub fn ceph_getxattr(cmount: *mut ceph_mount_info,
                         path: *const ::std::os::raw::c_char,
                         name: *const ::std::os::raw::c_char,
                         value: *mut ::std::os::raw::c_void,
                         size: size_t)
                         -> ::std::os::raw::c_int;
    /// Get an extended attribute.
    pub fn ceph_fgetxattr(cmount: *mut ceph_mount_info,
                          fd: ::std::os::raw::c_int,
                          name: *const ::std::os::raw::c_char,
                          value: *mut ::std::os::raw::c_void,
                          size: size_t)
                          -> ::std::os::raw::c_int;
    /// Get an extended attribute.
    pub fn ceph_lgetxattr(cmount: *mut ceph_mount_info,
                          path: *const ::std::os::raw::c_char,
                          name: *const ::std::os::raw::c_char,
                          value: *mut ::std::os::raw::c_void,
                          size: size_t)
                          -> ::std::os::raw::c_int;
    /// List the extended attribute keys on a file.
    pub fn ceph_listxattr(cmount: *mut ceph_mount_info,
                          path: *const ::std::os::raw::c_char,
                          list: *mut ::std::os::raw::c_char,
                          size: size_t)
                          -> ::std::os::raw::c_int;
    /// List the extended attribute keys on a file.
    pub fn ceph_flistxattr(cmount: *mut ceph_mount_info,
                           fd: ::std::os::raw::c_int,
                           list: *mut ::std::os::raw::c_char,
                           size: size_t)
                           -> ::std::os::raw::c_int;
    /// List the extended attribute keys on a file, but do not follow symbolic links.
    pub fn ceph_llistxattr(cmount: *mut ceph_mount_info,
                           path: *const ::std::os::raw::c_char,
                           list: *mut ::std::os::raw::c_char,
                           size: size_t)
                           -> ::std::os::raw::c_int;
    /// Remove an extended attribute from a file.
    pub fn ceph_removexattr(cmount: *mut ceph_mount_info,
                            path: *const ::std::os::raw::c_char,
                            name: *const ::std::os::raw::c_char)
                            -> ::std::os::raw::c_int;
    /// Remove an extended attribute from a file.
    pub fn ceph_fremovexattr(cmount: *mut ceph_mount_info,
                             fd: ::std::os::raw::c_int,
                             name: *const ::std::os::raw::c_char)
                             -> ::std::os::raw::c_int;
    /// Remove an extended attribute from a file, but do not follow symbolic links.
    pub fn ceph_lremovexattr(cmount: *mut ceph_mount_info,
                             path: *const ::std::os::raw::c_char,
                             name: *const ::std::os::raw::c_char)
                             -> ::std::os::raw::c_int;
    /// Set an extended attribute on a file.
    /// @param cmount the ceph mount handle to use for performing the setxattr.
    /// @param path the path to the file.
    /// @param name the name of the extended attribute to set.
    /// @param value the bytes of the extended attribute value
    /// @param size the size of the extended attribute value
    /// @param flags the flags can be:
    /// CEPH_XATTR_CREATE: create the extended attribute.  Must not exist.
    /// CEPH_XATTR_REPLACE: replace the extended attribute, Must already exist.
    /// @returns 0 on success or a negative error code on failure.
    pub fn ceph_setxattr(cmount: *mut ceph_mount_info,
                         path: *const ::std::os::raw::c_char,
                         name: *const ::std::os::raw::c_char,
                         value: *const ::std::os::raw::c_void,
                         size: size_t,
                         flags: ::std::os::raw::c_int)
                         -> ::std::os::raw::c_int;
    /// Set an extended attribute on a file.
    /// @param cmount the ceph mount handle to use for performing the setxattr.
    /// @param path the path to the file.
    /// @param name the name of the extended attribute to set.
    /// @param value the bytes of the extended attribute value
    /// @param size the size of the extended attribute value
    /// @param flags the flags can be:
    /// CEPH_XATTR_CREATE: create the extended attribute.  Must not exist.
    /// CEPH_XATTR_REPLACE: replace the extended attribute, Must already exist.
    /// @returns 0 on success or a negative error code on failure.
    pub fn ceph_fsetxattr(cmount: *mut ceph_mount_info,
                          fd: ::std::os::raw::c_int,
                          name: *const ::std::os::raw::c_char,
                          value: *const ::std::os::raw::c_void,
                          size: size_t,
                          flags: ::std::os::raw::c_int)
                          -> ::std::os::raw::c_int;
    /// Set an extended attribute on a file, but do not follow symbolic links
    /// @param cmount the ceph mount handle to use for performing the setxattr.
    /// @param path the path to the file.
    /// @param name the name of the extended attribute to set.
    /// @param value the bytes of the extended attribute value
    /// @param size the size of the extended attribute value
    /// @param flags the flags can be:
    /// CEPH_XATTR_CREATE: create the extended attribute.  Must not exist.
    /// CEPH_XATTR_REPLACE: replace the extended attribute, Must already exist.
    /// @returns 0 on success or a negative error code on failure.
    pub fn ceph_lsetxattr(cmount: *mut ceph_mount_info,
                          path: *const ::std::os::raw::c_char,
                          name: *const ::std::os::raw::c_char,
                          value: *const ::std::os::raw::c_void,
                          size: size_t,
                          flags: ::std::os::raw::c_int)
                          -> ::std::os::raw::c_int;
    /// Get the file striping unit from an open file descriptor.
    pub fn ceph_get_file_stripe_unit(cmount: *mut ceph_mount_info,
                                     fh: ::std::os::raw::c_int)
                                     -> ::std::os::raw::c_int;
    /// Get the file striping unit.
    pub fn ceph_get_path_stripe_unit(cmount: *mut ceph_mount_info,
                                     path: *const ::std::os::raw::c_char)
                                     -> ::std::os::raw::c_int;
    /// Get the file striping count from an open file descriptor.
    pub fn ceph_get_file_stripe_count(cmount: *mut ceph_mount_info,
                                      fh: ::std::os::raw::c_int)
                                      -> ::std::os::raw::c_int;
    /// Get the file striping count.
    pub fn ceph_get_path_stripe_count(cmount: *mut ceph_mount_info,
                                      path: *const ::std::os::raw::c_char)
                                      -> ::std::os::raw::c_int;
    /// Get the file object size from an open file descriptor.
    pub fn ceph_get_file_object_size(cmount: *mut ceph_mount_info,
                                     fh: ::std::os::raw::c_int)
                                     -> ::std::os::raw::c_int;
    /// Get the file object size.
    pub fn ceph_get_path_object_size(cmount: *mut ceph_mount_info,
                                     path: *const ::std::os::raw::c_char)
                                     -> ::std::os::raw::c_int;
    /// Get the file pool information from an open file descriptor.
    pub fn ceph_get_file_pool(cmount: *mut ceph_mount_info,
                              fh: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int;
    /// Get the file pool information.
    pub fn ceph_get_path_pool(cmount: *mut ceph_mount_info,
                              path: *const ::std::os::raw::c_char)
                              -> ::std::os::raw::c_int;
    /// Get the name of the pool a opened file is stored in,
    /// Write the name of the file's pool to the buffer.  If buflen is 0, return
    /// a suggested length for the buffer.
    pub fn ceph_get_file_pool_name(cmount: *mut ceph_mount_info,
                                   fh: ::std::os::raw::c_int,
                                   buf: *mut ::std::os::raw::c_char,
                                   buflen: size_t)
                                   -> ::std::os::raw::c_int;
    pub fn ceph_get_pool_name(cmount: *mut ceph_mount_info,
                              pool: ::std::os::raw::c_int,
                              buf: *mut ::std::os::raw::c_char,
                              buflen: size_t)
                              -> ::std::os::raw::c_int;
    pub fn ceph_get_path_pool_name(cmount: *mut ceph_mount_info,
                                   path: *const ::std::os::raw::c_char,
                                   buf: *mut ::std::os::raw::c_char,
                                   buflen: size_t)
                                   -> ::std::os::raw::c_int;
    pub fn ceph_get_file_layout(cmount: *mut ceph_mount_info,
                                fh: ::std::os::raw::c_int,
                                stripe_unit: *mut ::std::os::raw::c_int,
                                stripe_count: *mut ::std::os::raw::c_int,
                                object_size: *mut ::std::os::raw::c_int,
                                pg_pool: *mut ::std::os::raw::c_int)
                                -> ::std::os::raw::c_int;
    pub fn ceph_get_path_layout(cmount: *mut ceph_mount_info,
                                path: *const ::std::os::raw::c_char,
                                stripe_unit: *mut ::std::os::raw::c_int,
                                stripe_count: *mut ::std::os::raw::c_int,
                                object_size: *mut ::std::os::raw::c_int,
                                pg_pool: *mut ::std::os::raw::c_int)
                                -> ::std::os::raw::c_int;
    pub fn ceph_get_file_replication(cmount: *mut ceph_mount_info,
                                     fh: ::std::os::raw::c_int)
                                     -> ::std::os::raw::c_int;
    pub fn ceph_get_path_replication(cmount: *mut ceph_mount_info,
                                     path: *const ::std::os::raw::c_char)
                                     -> ::std::os::raw::c_int;
    pub fn ceph_get_pool_id(cmount: *mut ceph_mount_info,
                            pool_name: *const ::std::os::raw::c_char)
                            -> ::std::os::raw::c_int;
    pub fn ceph_get_pool_replication(cmount: *mut ceph_mount_info,
                                     pool_id: ::std::os::raw::c_int)
                                     -> ::std::os::raw::c_int;
    pub fn ceph_get_file_stripe_address(cmount: *mut ceph_mount_info,
                                        fd: ::std::os::raw::c_int,
                                        offset: int64_t,
                                        addr: *mut sockaddr_storage,
                                        naddr: ::std::os::raw::c_int)
                                        -> ::std::os::raw::c_int;
    pub fn ceph_get_file_extent_osds(cmount: *mut ceph_mount_info,
                                     fd: ::std::os::raw::c_int,
                                     offset: int64_t,
                                     length: *mut int64_t,
                                     osds: *mut ::std::os::raw::c_int,
                                     nosds: ::std::os::raw::c_int)
                                     -> ::std::os::raw::c_int;
    pub fn ceph_get_osd_crush_location(cmount: *mut ceph_mount_info,
                                       osd: ::std::os::raw::c_int,
                                       path: *mut ::std::os::raw::c_char,
                                       len: size_t)
                                       -> ::std::os::raw::c_int;
    pub fn ceph_get_osd_addr(cmount: *mut ceph_mount_info,
                             osd: ::std::os::raw::c_int,
                             addr: *mut sockaddr_storage)
                             -> ::std::os::raw::c_int;
    pub fn ceph_get_stripe_unit_granularity(cmount: *mut ceph_mount_info) -> ::std::os::raw::c_int;
    pub fn ceph_set_default_file_stripe_unit(cmount: *mut ceph_mount_info,
                                             stripe: ::std::os::raw::c_int)
                                             -> ::std::os::raw::c_int;
    pub fn ceph_set_default_file_stripe_count(cmount: *mut ceph_mount_info,
                                              count: ::std::os::raw::c_int)
                                              -> ::std::os::raw::c_int;
    pub fn ceph_set_default_object_size(cmount: *mut ceph_mount_info,
                                        size: ::std::os::raw::c_int)
                                        -> ::std::os::raw::c_int;
    pub fn ceph_set_default_preferred_pg(cmount: *mut ceph_mount_info,
                                         osd: ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int;
    pub fn ceph_set_default_file_replication(cmount: *mut ceph_mount_info,
                                             replication: ::std::os::raw::c_int)
                                             -> ::std::os::raw::c_int;
    pub fn ceph_localize_reads(cmount: *mut ceph_mount_info,
                               val: ::std::os::raw::c_int)
                               -> ::std::os::raw::c_int;
    pub fn ceph_get_local_osd(cmount: *mut ceph_mount_info) -> ::std::os::raw::c_int;
    pub fn ceph_debug_get_fd_caps(cmount: *mut ceph_mount_info,
                                  fd: ::std::os::raw::c_int)
                                  -> ::std::os::raw::c_int;
    pub fn ceph_debug_get_file_caps(cmount: *mut ceph_mount_info,
                                    path: *const ::std::os::raw::c_char)
                                    -> ::std::os::raw::c_int;
    pub fn ceph_ll_get_inode(cmount: *mut ceph_mount_info, vino: vinodeno_t) -> *mut Inode;
    pub fn ceph_ll_lookup_inode(cmount: *mut ceph_mount_info,
                                ino: inodeno_t,
                                inode: *mut *mut Inode)
                                -> ::std::os::raw::c_int;
    pub fn ceph_ll_lookup_root(cmount: *mut ceph_mount_info,
                               parent: *mut *mut Inode)
                               -> ::std::os::raw::c_int;
    pub fn ceph_ll_lookup(cmount: *mut ceph_mount_info,
                          parent: *mut Inode,
                          name: *const ::std::os::raw::c_char,
                          attr: *mut stat,
                          out: *mut *mut Inode,
                          uid: ::std::os::raw::c_int,
                          gid: ::std::os::raw::c_int)
                          -> ::std::os::raw::c_int;
    pub fn ceph_ll_put(cmount: *mut ceph_mount_info, in_: *mut Inode) -> ::std::os::raw::c_int;
    pub fn ceph_ll_forget(cmount: *mut ceph_mount_info,
                          in_: *mut Inode,
                          count: ::std::os::raw::c_int)
                          -> ::std::os::raw::c_int;
    pub fn ceph_ll_walk(cmount: *mut ceph_mount_info,
                        name: *const ::std::os::raw::c_char,
                        i: *mut *mut Inode,
                        attr: *mut stat)
                        -> ::std::os::raw::c_int;
    pub fn ceph_ll_getattr(cmount: *mut ceph_mount_info,
                           in_: *mut Inode,
                           attr: *mut stat,
                           uid: ::std::os::raw::c_int,
                           gid: ::std::os::raw::c_int)
                           -> ::std::os::raw::c_int;
    pub fn ceph_ll_setattr(cmount: *mut ceph_mount_info,
                           in_: *mut Inode,
                           st: *mut stat,
                           mask: ::std::os::raw::c_int,
                           uid: ::std::os::raw::c_int,
                           gid: ::std::os::raw::c_int)
                           -> ::std::os::raw::c_int;
    pub fn ceph_ll_open(cmount: *mut ceph_mount_info,
                        in_: *mut Inode,
                        flags: ::std::os::raw::c_int,
                        fh: *mut *mut Fh,
                        uid: ::std::os::raw::c_int,
                        gid: ::std::os::raw::c_int)
                        -> ::std::os::raw::c_int;
    pub fn ceph_ll_lseek(cmount: *mut ceph_mount_info,
                         filehandle: *mut Fh,
                         offset: off_t,
                         whence: ::std::os::raw::c_int)
                         -> off_t;
    pub fn ceph_ll_read(cmount: *mut ceph_mount_info,
                        filehandle: *mut Fh,
                        off: int64_t,
                        len: uint64_t,
                        buf: *mut ::std::os::raw::c_char)
                        -> ::std::os::raw::c_int;
    pub fn ceph_ll_fsync(cmount: *mut ceph_mount_info,
                         fh: *mut Fh,
                         syncdataonly: ::std::os::raw::c_int)
                         -> ::std::os::raw::c_int;
    pub fn ceph_ll_write(cmount: *mut ceph_mount_info,
                         filehandle: *mut Fh,
                         off: int64_t,
                         len: uint64_t,
                         data: *const ::std::os::raw::c_char)
                         -> ::std::os::raw::c_int;
    pub fn ceph_ll_readv(cmount: *mut ceph_mount_info,
                         fh: *mut Fh,
                         iov: *const iovec,
                         iovcnt: ::std::os::raw::c_int,
                         off: int64_t)
                         -> int64_t;
    pub fn ceph_ll_writev(cmount: *mut ceph_mount_info,
                          fh: *mut Fh,
                          iov: *const iovec,
                          iovcnt: ::std::os::raw::c_int,
                          off: int64_t)
                          -> int64_t;
    pub fn ceph_ll_close(cmount: *mut ceph_mount_info,
                         filehandle: *mut Fh)
                         -> ::std::os::raw::c_int;
    pub fn ceph_ll_iclose(cmount: *mut ceph_mount_info,
                          in_: *mut Inode,
                          mode: ::std::os::raw::c_int)
                          -> ::std::os::raw::c_int;
    pub fn ceph_ll_getxattr(cmount: *mut ceph_mount_info,
                            in_: *mut Inode,
                            name: *const ::std::os::raw::c_char,
                            value: *mut ::std::os::raw::c_void,
                            size: size_t,
                            uid: ::std::os::raw::c_int,
                            gid: ::std::os::raw::c_int)
                            -> ::std::os::raw::c_int;
    pub fn ceph_ll_setxattr(cmount: *mut ceph_mount_info,
                            in_: *mut Inode,
                            name: *const ::std::os::raw::c_char,
                            value: *const ::std::os::raw::c_void,
                            size: size_t,
                            flags: ::std::os::raw::c_int,
                            uid: ::std::os::raw::c_int,
                            gid: ::std::os::raw::c_int)
                            -> ::std::os::raw::c_int;
    pub fn ceph_ll_listxattr(cmount: *mut ceph_mount_info,
                             in_: *mut Inode,
                             list: *mut ::std::os::raw::c_char,
                             buf_size: size_t,
                             list_size: *mut size_t,
                             uid: ::std::os::raw::c_int,
                             gid: ::std::os::raw::c_int)
                             -> ::std::os::raw::c_int;
    pub fn ceph_ll_removexattr(cmount: *mut ceph_mount_info,
                               in_: *mut Inode,
                               name: *const ::std::os::raw::c_char,
                               uid: ::std::os::raw::c_int,
                               gid: ::std::os::raw::c_int)
                               -> ::std::os::raw::c_int;
    pub fn ceph_ll_create(cmount: *mut ceph_mount_info,
                          parent: *mut Inode,
                          name: *const ::std::os::raw::c_char,
                          mode: mode_t,
                          flags: ::std::os::raw::c_int,
                          attr: *mut stat,
                          out: *mut *mut Inode,
                          fhp: *mut *mut Fh,
                          uid: ::std::os::raw::c_int,
                          gid: ::std::os::raw::c_int)
                          -> ::std::os::raw::c_int;
    pub fn ceph_ll_mkdir(cmount: *mut ceph_mount_info,
                         parent: *mut Inode,
                         name: *const ::std::os::raw::c_char,
                         mode: mode_t,
                         attr: *mut stat,
                         out: *mut *mut Inode,
                         uid: ::std::os::raw::c_int,
                         gid: ::std::os::raw::c_int)
                         -> ::std::os::raw::c_int;
    pub fn ceph_ll_link(cmount: *mut ceph_mount_info,
                        in_: *mut Inode,
                        newparrent: *mut Inode,
                        name: *const ::std::os::raw::c_char,
                        attr: *mut stat,
                        uid: ::std::os::raw::c_int,
                        gid: ::std::os::raw::c_int)
                        -> ::std::os::raw::c_int;
    pub fn ceph_ll_truncate(cmount: *mut ceph_mount_info,
                            in_: *mut Inode,
                            length: uint64_t,
                            uid: ::std::os::raw::c_int,
                            gid: ::std::os::raw::c_int)
                            -> ::std::os::raw::c_int;
    pub fn ceph_ll_opendir(cmount: *mut ceph_mount_info,
                           in_: *mut Inode,
                           dirpp: *mut *mut ceph_dir_result,
                           uid: ::std::os::raw::c_int,
                           gid: ::std::os::raw::c_int)
                           -> ::std::os::raw::c_int;
    pub fn ceph_ll_releasedir(cmount: *mut ceph_mount_info,
                              dir: *mut ceph_dir_result)
                              -> ::std::os::raw::c_int;
    pub fn ceph_ll_rename(cmount: *mut ceph_mount_info,
                          parent: *mut Inode,
                          name: *const ::std::os::raw::c_char,
                          newparent: *mut Inode,
                          newname: *const ::std::os::raw::c_char,
                          uid: ::std::os::raw::c_int,
                          gid: ::std::os::raw::c_int)
                          -> ::std::os::raw::c_int;
    pub fn ceph_ll_unlink(cmount: *mut ceph_mount_info,
                          in_: *mut Inode,
                          name: *const ::std::os::raw::c_char,
                          uid: ::std::os::raw::c_int,
                          gid: ::std::os::raw::c_int)
                          -> ::std::os::raw::c_int;
    pub fn ceph_ll_statfs(cmount: *mut ceph_mount_info,
                          in_: *mut Inode,
                          stbuf: *mut statvfs)
                          -> ::std::os::raw::c_int;
    pub fn ceph_ll_readlink(cmount: *mut ceph_mount_info,
                            in_: *mut Inode,
                            buf: *mut ::std::os::raw::c_char,
                            bufsize: size_t,
                            uid: ::std::os::raw::c_int,
                            gid: ::std::os::raw::c_int)
                            -> ::std::os::raw::c_int;
    pub fn ceph_ll_symlink(cmount: *mut ceph_mount_info,
                           parent: *mut Inode,
                           name: *const ::std::os::raw::c_char,
                           value: *const ::std::os::raw::c_char,
                           attr: *mut stat,
                           in_: *mut *mut Inode,
                           uid: ::std::os::raw::c_int,
                           gid: ::std::os::raw::c_int)
                           -> ::std::os::raw::c_int;
    pub fn ceph_ll_rmdir(cmount: *mut ceph_mount_info,
                         in_: *mut Inode,
                         name: *const ::std::os::raw::c_char,
                         uid: ::std::os::raw::c_int,
                         gid: ::std::os::raw::c_int)
                         -> ::std::os::raw::c_int;
    pub fn ceph_ll_stripe_unit(cmount: *mut ceph_mount_info, in_: *mut Inode) -> uint32_t;
    pub fn ceph_ll_file_layout(cmount: *mut ceph_mount_info,
                               in_: *mut Inode,
                               layout: *mut ceph_file_layout)
                               -> uint32_t;
    pub fn ceph_ll_snap_seq(cmount: *mut ceph_mount_info, in_: *mut Inode) -> uint64_t;
    pub fn ceph_ll_get_stripe_osd(cmount: *mut ceph_mount_info,
                                  in_: *mut Inode,
                                  blockno: uint64_t,
                                  layout: *mut ceph_file_layout)
                                  -> ::std::os::raw::c_int;
    pub fn ceph_ll_num_osds(cmount: *mut ceph_mount_info) -> ::std::os::raw::c_int;
    pub fn ceph_ll_osdaddr(cmount: *mut ceph_mount_info,
                           osd: ::std::os::raw::c_int,
                           addr: *mut uint32_t)
                           -> ::std::os::raw::c_int;
    pub fn ceph_ll_get_internal_offset(cmount: *mut ceph_mount_info,
                                       in_: *mut Inode,
                                       blockno: uint64_t)
                                       -> uint64_t;
    pub fn ceph_ll_read_block(cmount: *mut ceph_mount_info,
                              in_: *mut Inode,
                              blockid: uint64_t,
                              bl: *mut ::std::os::raw::c_char,
                              offset: uint64_t,
                              length: uint64_t,
                              layout: *mut ceph_file_layout)
                              -> ::std::os::raw::c_int;
    pub fn ceph_ll_write_block(cmount: *mut ceph_mount_info,
                               in_: *mut Inode,
                               blockid: uint64_t,
                               buf: *mut ::std::os::raw::c_char,
                               offset: uint64_t,
                               length: uint64_t,
                               layout: *mut ceph_file_layout,
                               snapseq: uint64_t,
                               sync: uint32_t)
                               -> ::std::os::raw::c_int;
    pub fn ceph_ll_commit_blocks(cmount: *mut ceph_mount_info,
                                 in_: *mut Inode,
                                 offset: uint64_t,
                                 range: uint64_t)
                                 -> ::std::os::raw::c_int;
}
